import os
import glob
import smtplib
from email.message import EmailMessage
from datetime import datetime

# ================================
# üìß EMAIL CONFIGURATION
# ================================
EMAIL_USER = os.environ.get("EMAIL_USER")  # your Gmail address
GMAIL_APP_PASSWORD = os.environ.get("GMAIL_APP_PASSWORD")  # Gmail App Password
EMAIL_RECIPIENT = os.environ.get("EMAIL_RECIPIENT", EMAIL_USER)  # recipient(s)

REPORTS_DIR = "reports"

# ================================
# üß† FIND MOST RECENT REPORT
# ================================
def get_latest_report():
    abs_reports_dir = os.path.join(os.getcwd(), REPORTS_DIR)
    print(f"üìÇ Searching for reports in: {abs_reports_dir}")

    # Match both Markdown and text report formats
    patterns = [
        os.path.join(abs_reports_dir, "open_data_policy_report_*.md"),
        os.path.join(abs_reports_dir, "open_data_policy_report_*.txt"),
    ]

    report_files = []
    for p in patterns:
        found = glob.glob(p)
        print(f"üîé Pattern '{p}' matched {len(found)} file(s).")
        report_files.extend(found)

    if not report_files:
        print("‚ö†Ô∏è No report files found in 'reports/' folder.")
        return None

    latest_file = max(report_files, key=os.path.getmtime)
    print(f"üìÑ Latest report found: {latest_file}")
    return latest_file

# ================================
# ‚úâÔ∏è SEND EMAIL
# ================================
def send_email(report_path=None):
    msg = EmailMessage()
    msg["Subject"] = "üßæ Weekly Open Data Policy Monitor Report"
    msg["From"] = EMAIL_USER
    msg["To"] = EMAIL_RECIPIENT

    if not report_path:
        report_path = get_latest_report()
        if not report_path:
            print("‚ö†Ô∏è No report found to attach.")
            return

    print(f"üì¨ Preparing to email report: {report_path}")

    report_date = datetime.now().strftime("%B %d, %Y")
    msg.set_content(
        f"""Hello,

Your weekly Open Data Policy Monitor report is ready.

Attached is the latest report generated by the automated workflow.

Best regards,
Heidi's Best Attempt at a Open Data Policy Monitor Bot ü§ñ
"""
    )

    # Attach the report if available
    if os.path.exists(report_path):
        with open(report_path, "rb") as f:
            report_data = f.read()
            filename = os.path.basename(report_path)
            maintype = "text"
            subtype = "plain" if filename.endswith(".txt") else "markdown"
            msg.add_attachment(
                report_data,
                maintype=maintype,
                subtype=subtype,
                filename=filename
            )
            print(f"üìé Attached file: {filename}")
    else:
        print(f"‚ö†Ô∏è Report file not found at path: {report_path}")
        return

    # Send the email
    try:
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(EMAIL_USER, GMAIL_APP_PASSWORD)
            smtp.send_message(msg)
            print(f"‚úÖ Email sent to {EMAIL_RECIPIENT} with report: {os.path.basename(report_path)}")
    except Exception as e:
        print(f"‚ùå Failed to send email: {e}")


# ================================
# üöÄ MAIN
# ================================
if __name__ == "__main__":
    print("üîß Starting email notification script...")
    latest_report = get_latest_report()
    if latest_report:
        send_email(latest_report)
    else:
        print("‚ö†Ô∏è No report available to send.")
